#Управление задачами
#атрибуты: описание задачи, срок выполнения и статус(выполнено / не  выполнено).
#Реализуй функцию для добавления задач, отметки выполненных задач и вывода списка
#текущих (не выполненных) задач.
class Task():
    def __init__(self):  #мы можем вносить инф-ю в наш класс извне - чрез аргументы(self, x.y). А можем - задавать ее прямо в классе),
        self.tasks = []  #создаем список (list) tasks - список б.хранить все наши задачи

    def add_task(self,deadline, description): #ф-я добавления задачи
        self.tasks.append({'deadline': deadline, 'description': description, 'status':'не выполнено'})
                  #задачи в список добавлять будем в виде словаря(добавляем в список словарь - те пары значений)

    def complete_tasks(self, description):  #отметка о выполнении задачи
        for task in self.tasks:   #будем перебирать весь список и искать переданное в аргументе описание з-чи
            if task['description'] == description:  #описанте текущей з-чи(по ключу) сравниваем с описанием з-чи, переданным в кач-ве аргумента
                task['status'] = 'Выполнено'
                print(f'Задача {description} выполнена')  #берем описание з-чи из аргумента
            else:
                print(f'Задача {description} не найдена')

    def show_tasks(self):  #вывод списка текущих (невыполненных) задач
        print(f'Текущие задачи:')
        for task in self.tasks:  # перебираем цикл и проверяем статус каж з-чи
            if task['status'] == 'не выполнено':  #берем точное соответствие из add_task()
                print(f'{task['description']} - {task['deadline']}')
     #Класс готов

t = Task()

t.add_task('01.11.2024', 'Прочитать книгу')
t.add_task('31.10.2024', 'Пробежать марафон')
t.add_task('02.11.2024', 'Сделать массаж')

t.show_tasks()

t.complete_tasks('Прочитать книгу')