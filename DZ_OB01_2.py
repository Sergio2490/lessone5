#Задача 2
# Ты разрабатываешь программное обеспечение для сети магазинов. Каждый магазин в этой сети
# имеет свои особенности, но также существуют общие характеристики, такие как адрес, название и
# ассортимент товаров. Ваша задача — создать класс `Store`, который можно будет использовать для
# создания различных магазинов.
#Шаги:
#1. Создай класс `Store`:
# Атрибуты класса:
# - `name`: название магазина.
# - `address`: адрес магазина.
# - `items`: словарь, где ключ - название товара, а значение - его цена. Например, `{'apples': 0.5, 'bananas': 0.75}`.
#
#  Методы класса:
# - `__init__ - конструктор, который инициализирует название и адрес, а также пустой словарь для `items`.
# -  метод для добавления товара в ассортимент.
# - метод для удаления товара из ассортимента.
# - метод для получения цены товара по его названию. Если товар отсутствует, возвращайте `None`.
# - метод для обновления цены товара.
#
# 2. Создай несколько объектов класса `Store`: Создай не менее трех различных магазинов с разными
# названиями, адресами и добавь в каждый из них несколько товаров.
# 3. Протестировать методы: Выбери один из созданных магазинов и протестируй все его методы:
# добавь товар, обнови цену, убери товар и запрашивай цену.
class Store():
    def __init__(self, name, address):
        self.name = name   # название магазина
        self.address = address  # адрес магазина
        self.items = {}

    def add_item(self, item_name, price):   #Добавление товаров в ассортимент - метод
        self.items[item_name] = price    #self.items - словарь, [item_name] - задаем для него новый ключ, price - задаем значение нашего ключа - это цена
        print(f'товар {item_name} был добавлен в {self.name}')  #item_name -название товара, self.name - назв магазина из ф-ции init

    def remove_item(self, item_name):  #Удаление товар item_name из ассортимента
        if item_name in self.items:  #если товар с назв.item_name есть в нашем словаре self_items
            del self.items[item_name]   #то удаляем товар из словаря
            print(f'товар {item_name} был удалён из {self.name}')

    def get_price(self, item_name):   #Метод для получения цены товара
        return self.items.get(item_name)   #ьуещв словаря get() возвращает значение  (цену), соответствующее ключу item_name

    def update_price(self, item_name, new_price):  #Метод для обновления цены товара
        if item_name in self.items:  #проверим, есть ли товар с таким названием в словаре self.items
            self.items[item_name] = new_price   #если назв товара есть в словаре, присваивает товару с ключом [items_name] новое значение цены
            print(f'цена {item_name} была обновлена в {self.name}')
        else:
            print(f'товар {item_name}не найден')

   #Класс создали, проверяем. Создадим несколько объектов класса
store1 = Store('Пятерочка', 'Ленина 40')
store2 = Store('Магнит', 'Ленина 45')
store3 = Store('Ярче', 'Ленина 80')

   #Добавим несколько товаров в ассортимент магазина 1
store1.add_item('хлеб', 67)
store1.add_item('молоко', 120)
store1.add_item('гречка', 60)

   #протестируем метод удаления
store1.remove_item('хлеб')
   #протестируем метод для получения цены
print(store1.get_price('молоко'))  # зкште - тк в функции - return

   #протестируем метод для обновления цены
store1.update_price('гречка', 80)





            


